{
  "hash": "ff3ee704175b7484747b0029addd8526",
  "result": {
    "engine": "knitr",
    "markdown": "# Manipulação de séries temporais univariadas no software `R`\n\n\n## Definição de séries temporais\n\nConsidere um fenômeno aleatório que é observado ao longo do tempo. A coleção de variáveis aleatórias indexadas no tempo, associadas a este fenômeno, é denominada série temporal. Neste caso, para cada instante de tempo $t$, há uma variável $X(t)$ associada.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\n\n\n\n![Figure 1 - Ilustração de uma série temporal](intro_files/figure-pdf/figura1-1.png)\n\nAlguns autores definem séries temporais simplesmente como valores observados ao longo do tempo.No entanto, essa definição não é útil para nós, uma vez que o tempo não necessariamente possui influência na variável, ou seja, é possível que a distribuição de $X(t)$ não dependa de $t$.\n\n::: {.alert .alert-success}\n<strong>Importante</strong>: estamos interessados apenas em séries temporais nas quais o modelo de probabilidades depende do tempo $t$.\n:::\n\nA partir deste momento, $X(t)$ será escrita como $X_t$ e representará a variável aleatória associada ao tempo $t$ e a versão minúscula $x_t$ representará o valor observado.\n\n## A classe `ts` e a função `window`\n\nNessa seção vamos distutir a classe `ts` do `R`. Ela é particularmente útil para fazer gráficos de séries temporais.  A função `ts` possui vários argumentos importantes:\n\n* `data`: vetor ou matriz da série observada\n\n* `frequency`: esse valor representa o número de observações por período. Vamos discutir essa particularidade em outro momento, mas para a maioria das séries, o período é representado por um ano e o valor de `frequency` está relacionado com quantas observações são necessárias para completar um ano. Por exemplo, se os dados são registrados mensalmente, temos `frequency=12`. Em caso de trimestres, `frequency=4`. O valor padrão é `frequency=1`.\n\n* `deltat`: é o inverso do número de observações por período. Apenas um entre `frequency` e `deltat` deve ser dado.\n\n* `start`: representa o tempo no qual a série começa. Pode ser representado por um único número ou por um vetor de dois números, com o segundo \nrepresentando o momento dentro do período.  Por exemplo:\n\n  * se `frequancy=12` (meses em um ano) então `start=c(1996,2)` implica que a primeira observação data de fevereiro de 1996. \n  \n  * se `frequancy=4` (trimestres em um ano) então `start=c(1996,2)` implica que a primeira observação data do segundo trimestre dede 1996. \n  \n\n* `end`: representa o tempo no qual a série termina. A sintaxe é a mesma do `start`\n\n* `names`: é um vetor com o nomes das séries. É utilizado apenas quando há mais de uma série temporal.\n\n\n<div class='alert alert-info'>\n**Exemplo**\n\nVamos ilustrar a construção de um objeto ts`` utilizando a tabela abaixo, que apresenta o número de nascidos vivos por mês na cidade de Manaus em 2021.\n\n| Mês | No. nascidos vivos |\n|-----------|--------------|\n| Janeiro | 3043 |\n| Fevereiro | 2902 |\n| Março | 3166 |\n| Abril | 3014 |\n| Maio | 3095 |\n| Junho | 2955 |\n| Julho | 3087 |\n| Agosto | 3141 |\n| Setembro | 3129 |\n| Outubro | 3096 |\n| Novembro | 3191 |\n| Dezembro | 3222| \n\n\nVamos guarda a série no vetor `x` e construir o objeto `y` na classe `ts`.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(\n  3043, 2902, 3166, 3014,\n3095, 2955, 3087, 3141,\n3129, 3096, 3191, 3222\n\n)\ny <- ts( x, start = c(2021,1), frequency = 12)\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      Jan  Feb  Mar  Apr  May  Jun  Jul  Aug  Sep  Oct  Nov  Dec\n2021 3043 2902 3166 3014 3095 2955 3087 3141 3129 3096 3191 3222\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\nA função `plot` reconhece um objeto na classe `ts` e constrói um gráfico com o tempo devidamente marcado no eixo as abscissas.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(y)\n```\n\n::: {.cell-output-display}\n![](intro_files/figure-pdf/unnamed-chunk-2-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\n\n\n\n\nOutros detalhes gráficos da função `plot` podem ser utilizados. \n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(y, ylab = 'No. nascidos vivos', lwd = 2, col = 'seagreen', xlab = 'Ano', main = 'Série mensal de nascidos vivos em Manaus', sub='Fonte: Sistema de Informação sobre Nascidos Vivos/SUS')\n```\n\n::: {.cell-output-display}\n![](intro_files/figure-pdf/unnamed-chunk-3-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\n\n\n\n</div>\n\n\nÉ possível extrair os argumentos de um `ts` já criado utilizando funções com os mesmos nomes dos respectivos argumentos. No exemplo acima, criamos o objeto denominado `y`. Abaixo, extraímos os argumentos deste objeto.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstart(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2021    1\n```\n\n\n:::\n\n```{.r .cell-code}\nend(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2021   12\n```\n\n\n:::\n\n```{.r .cell-code}\nfrequency(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 12\n```\n\n\n:::\n\n```{.r .cell-code}\ndeltat(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.08333333\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n\n\nA função `window` é particularmente útil para selecionar um subconjunto da série temporal. Seus argumentos são os mesmos da função `ts`.\n\n\n<div class='alert alert-info'>\n**Exemplo** Utilizando o mesmo conjunto de dados do exemplo anterior, vamos usar a função  `window` para extrair apenas os nascimentos entre junho e agosto.\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nz <- window(y, start=c(2021,6), end = c(2021,8))\nz\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      Jun  Jul  Aug\n2021 2955 3087 3141\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\nAcima, `z` é um novo objeto `ts`. Podemos usar a função `lines` destacar a parte selecionada da série em um gráfico já existente. Abaixo, descatamos os dados selecionados em `z`.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(y, ylab = 'No. nascidos vivos', lwd = 2, col = 'seagreen', xlab = 'Ano', main = 'Série \nmensal de nascidos vivos em Manaus', sub='Fonte: Sistema de Informação sobre Nascidos Vivos/SUS')\nlines(z, col ='brown', lwd = 4 )\n```\n\n::: {.cell-output-display}\n![](intro_files/figure-pdf/unnamed-chunk-6-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\n\n\n\n</div>\n\n\n<div class='alert alert-warning'>\n<strong>Exercício 1</strong>\n\nA série abaixo representa o número de homicídios mensais no Amazonas, segundo causa básica de óbito, entre os anos 2000 e 2023.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrequire(gsheet)\nurl = 'https://docs.google.com/spreadsheets/d/1rtiyOZ1W3SRIWZJTR1RyBmxmnGO11x005GNGrgLBr5A/edit?usp=sharing'\n\nhom = gsheet2tbl(url)\n```\n:::\n\n\n\n\n\n\n\n\n1. Construa um objeto do tipo `ts`\n\n3. Faça um gráfico da série.\n\n4. Crie um janela para marcar o período entre o início da pandemia de COVID-19 (março de 2020) e o primeiro dia sem mortes por COVID-19 (julho de 2021) \n\n5. Represente a janela acima no gráfico anterior. O que esse gráfico revela?\n\n</div>\n\n\n## A classe `Date` e o pacote `lubridate`\n\nNessa seção discutimos a classe `Date`, responsável por operações com datas no `R`. São apresentadas as principais funções do pacote `base`. Em seguida, apresentamos o pacote `lubridate`, que oferece funções adicionais e uma sintaxe mais fluida.   \n\n\nNo pacote `base`, as datas são objeto da classe `Date`. Abaixo, transformamos o texto que representa 3 de agosto de 1998 nessa classe.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 3 de agosto de 1998 (formato americano)\nx <- '1998/8/3'\ny <- as.Date(x)\n```\n:::\n\n\n\n\n\n\n\n\nExistem diversas funções que interagem com objetos nessa classe: \n\n* `weekdays`:  Retorna o dia da semana.\n\n* `months`: Retorna o nome do mês.\n\n* `quarters`: Retorna o trimestre do ano (Q1,Q2,Q3 ou Q4).\n\n\nAbaixo, ilustramos o uso dessas funções com a data 3 de agosto de 1998.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweekdays(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"segunda-feira\"\n```\n\n\n:::\n\n```{.r .cell-code}\nmonths(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"agosto\"\n```\n\n\n:::\n\n```{.r .cell-code}\nquarters(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Q3\"\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\nOutra vantagem desta classe é a possibilidade de calcular a diferença em dias entre duas datas, utilizando a função `-`. Abaixo mostramos a diferença entre 3 de agosto de 1998 e 3 de agosto de 1999.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nz <- as.Date('1999-08-03')\nz-y\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nTime difference of 365 days\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\nEm certas aplicações, é necessário criar um vetor contendo datas em sequência. A função `seq` interage com objetos da classe `Date`, permitindo que o argumento `by` receba as strings `day`, `week`,`month`, `quarter` e `year`. Abaixo, criamos um vetor mensal que começa em 3 de agosto de 1998 e terminando e 3 de agosto de 1999.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninicio <- as.Date('1998-08-03')\nfim <- as.Date('1999-08-03')\nseq(inicio, fim, by='month')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"1998-08-03\" \"1998-09-03\" \"1998-10-03\" \"1998-11-03\" \"1998-12-03\"\n [6] \"1999-01-03\" \"1999-02-03\" \"1999-03-03\" \"1999-04-03\" \"1999-05-03\"\n[11] \"1999-06-03\" \"1999-07-03\" \"1999-08-03\"\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n\nObserve que a conversão da `string` para `Date` é realizada considerando o formato americano por padrão. É possível usar a função `as.Date` para ler qualquer formato, modificando o argumento `format`. No entanto, o pacote `lubridate` oferece funções mais simples para essa conversão:\n\n* `ymd`: Converte `strings` no formato \"ano, mês, dia\", como \"2023-10-26\".\n\n* `mdy`: Converte `strings` no formato \"mês, dia, ano\", como \"10-26-2023\".\n\n* `dmy`: Converte `strings` no formato \"dia, mês, ano\", como \"26-10-2023\".\n\n\nAbaixo, transformamos a data 3/8/1998 para o formato americano.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrequire(lubridate)\n# 3 de agosto de 1998 (formato nacional)\nx <- '3/8/1998'\ndmy(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"1998-08-03\"\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n\nO `lubridate` também ofere a possibilidade de trabalhar com informações de tempo dentro de um dia, como horas, minutos e segundos. Por exemplo, a informação 15h30 de 3 de agosto de 1998 é lida como\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- '3/8/1998 15:30:00'\ndmy_hms(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"1998-08-03 15:30:00 UTC\"\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\nO `lubridate` possui as funções `month` e `wday`, que funcionam de modo análgo às funções `months` e `weekdays`. Além disso, o `lubridate` traz uma série de funções adicionais como:\n\n* `year`: retorna o ano de uma data\n* `day`: retornam o dia de uma data (útil para o formado xxx-xx-xx 00:00:00)\n* `hour`, `minute`, `second`: Retornam a hora, minuto e segundo de um objeto de data e tempo.\n\nAs funções de arredondamento de data também são úteis, especialmente para obter contagens mensais, anuais, etc. Elas são `floor_date` e `ceiling_date` e são responsáveis por arredondar uma data para o início ou o fim de um período, respectivamente. Abaixo, arredondamos a data 3 de agosto de 1998 para o começo do mês.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- dmy('03/08/1998')\nfloor_date(x, 'month')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"1998-08-01\"\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n<div class='alert alert-info'>\n**Exemplo**\n\nA Força Aérea Brasileira (FAB), por meio do Centro de Investigação e Prevenção de Acidentes Aeronáuticos (CENIPA), possui um `dashboard` para explorar dados sobre incidentes e acidentes aéreos no Brasil. Um acidente é definido como uma ocorrência grave associada à operação de uma aeronave que resulta em lesões ou morte, dano estrutural da aeronave ou aeronave desaparecida. Os demais casos são classificados como incidentes. Os dados, atualizados em 11/08/2025, estão disponíveis para esse curso na `url` abaixo:\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nurl <- 'https://docs.google.com/spreadsheets/d/1BjTXFMmTpcxKdRHCr5IIDJde9yr0s3oAAfyj2vdVuX8/edit?usp=sharing'\n\naereo <-  gsheet2tbl(url)\nhead(aereo)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 x 10\n  Link   Data  Matrícula Classificação Tipo  Localidade UF    Aeródromo Operação\n  <chr>  <chr> <chr>     <chr>         <chr> <chr>      <chr> <chr>     <chr>   \n1 https~ 05/0~ ****      INCIDENTE     FALH~ RIO DE JA~ RJ    FAER      TÁXI AÉ~\n2 https~ 04/0~ ****      INCIDENTE     FALH~ MARICÁ     RJ    NCAD      TÁXI AÉ~\n3 https~ 01/0~ ****      INCIDENTE     FALH~ RIO DE JA~ RJ    SBJR      TÁXI AÉ~\n4 https~ 31/0~ ****      INCIDENTE     FALH~ PALMAS     TO    SBPJ      REGULAR \n5 https~ 29/0~ ****      INCIDENTE     FALH~ BOA VISTA  RR    FAER      TÁXI AÉ~\n6 https~ 29/0~ ****      INCIDENTE     COLI~ RECIFE     PE    SBRF      REGULAR \n# i 1 more variable: Status <chr>\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\nA unidade amostral é o acidente/indicente. Estamos interessados em criar uma série temporal com o número de acidentes mensais. Abaixo, filtramos apenas os acidentes (coluna `Classificção`) e, em seguida, transformamos as datas em objetos do tipo `Date`.\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacidentes <- aereo[ aereo$Classificação=='ACIDENTE', ]\ndatas <- dmy(acidentes$Data)\n```\n:::\n\n\n\n\n\n\n\n\nAgora, vamos arredondar todas as datas para o primeiro dia do mês. Em seguida, contaremos as frequências para cada mês/ano\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmes_ano <- floor_date(datas, 'month')\ncontagem <- table(mes_ano)\ncontagem\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nmes_ano\n2015-01-01 2015-02-01 2015-03-01 2015-04-01 2015-05-01 2015-06-01 2015-07-01 \n        12         14         15         19         16         14         16 \n2015-08-01 2015-09-01 2015-10-01 2015-11-01 2015-12-01 2016-01-01 2016-02-01 \n        13         17          9         14         13         20         16 \n2016-03-01 2016-04-01 2016-05-01 2016-06-01 2016-07-01 2016-08-01 2016-09-01 \n        20         19          8          5         11          4         17 \n2016-10-01 2016-11-01 2016-12-01 2017-01-01 2017-02-01 2017-03-01 2017-04-01 \n        20          9         15         17         16         11         16 \n2017-05-01 2017-06-01 2017-07-01 2017-08-01 2017-09-01 2017-10-01 2017-11-01 \n         8          6         12          6         14         15         16 \n2017-12-01 2018-01-01 2018-02-01 2018-03-01 2018-04-01 2018-05-01 2018-06-01 \n         9         18         19         18         18         15         13 \n2018-07-01 2018-08-01 2018-09-01 2018-10-01 2018-11-01 2018-12-01 2019-01-01 \n        15          8         11          8         14         10         20 \n2019-02-01 2019-03-01 2019-04-01 2019-05-01 2019-06-01 2019-07-01 2019-08-01 \n        10         17         14         12         13         15          8 \n2019-09-01 2019-10-01 2019-11-01 2019-12-01 2020-01-01 2020-02-01 2020-03-01 \n        14          6         11         11         11         17         12 \n2020-04-01 2020-05-01 2020-06-01 2020-07-01 2020-08-01 2020-09-01 2020-10-01 \n        14          9          6         16          9         15         18 \n2020-11-01 2020-12-01 2021-01-01 2021-02-01 2021-03-01 2021-04-01 2021-05-01 \n         7         16         13         16         17          7         17 \n2021-06-01 2021-07-01 2021-08-01 2021-09-01 2021-10-01 2021-11-01 2021-12-01 \n         5          8          8         12          7         13         18 \n2022-01-01 2022-02-01 2022-03-01 2022-04-01 2022-05-01 2022-06-01 2022-07-01 \n        15         12         13         13          9         13          8 \n2022-08-01 2022-09-01 2022-10-01 2022-11-01 2022-12-01 2023-01-01 2023-02-01 \n         8         12         10         13         12         21         21 \n2023-03-01 2023-04-01 2023-05-01 2023-06-01 2023-07-01 2023-08-01 2023-09-01 \n        18         12         17         15          7          6          5 \n2023-10-01 2023-11-01 2023-12-01 2024-01-01 2024-02-01 2024-03-01 2024-04-01 \n         8         14         11         17         21         12         22 \n2024-05-01 2024-06-01 2024-07-01 2024-08-01 2024-09-01 2024-10-01 2024-11-01 \n         7         15         13          9         13         12         14 \n2024-12-01 2025-01-01 2025-02-01 2025-03-01 2025-04-01 2025-05-01 2025-06-01 \n        20         22         11         13         20         10          5 \n2025-07-01 \n        11 \n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\nÉ sempre importante checar o resultado em `contagem`, para verificar se não há algum mês ausente. Como não o caso aqui, vamos construir um objeto do tipo `ts` e fazer o gráfico da série temporal.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nserie <- ts(contagem, start=c(2015,1), frequency = 12 )\nplot(serie, ylab = 'No. de acidentes aéreos', xlab = 'Ano', sub= 'Fonte: CENIPA' )\n```\n\n::: {.cell-output-display}\n![](intro_files/figure-pdf/unnamed-chunk-18-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\n\n\n\n</div>\n\n\n<div class='alert alert-warning'>\n<strong>Exercício 2</strong>\n\n\nA série abaixo contém as datas dos óbitos maternos no Brasil a partir de 2010.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nurl <- 'https://drive.google.com/uc?authuser=0&id=1tYFFT9L2iopKmBDUI3P8qNIRaOnMYj7d&export=download'\n```\n:::\n\n\n\n\n\n\n\n\nCrie uma série temporal com o número de óbitos mensal e faça um gráfico. Crie uma janela para destacar no gráfico o período da pandemia de COVID-19 (março de 2020 até julhode 2021).\n\n</div>\n\n\n\n",
    "supporting": [
      "intro_files\\figure-pdf"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}